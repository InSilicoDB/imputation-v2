#!/bin/bash
#PBS -l nodes=1:ppn=1
#PBS -l mem=8gb
#PBS -q stsi
#PBS -l walltime=340:00:00
#PBS -j oe

echo "Running on node:"
hostname

module load plink2
module load ucsc_tools/373
module load vcftools
module load samtools


#Examples of the variables needed (-v)
#myinput=/stsi/raqueld/vcf/6800_JHS_all_chr_sampleID_c2.vcf
#buildcheck=/stsi/raqueld/0_check_vcf_build/6800_JHS_all_chr_sampleID_c2.BuildChecked
#myoutdir=/stsi/raqueld/1_lift

#How to run Example
#qsub 1_lift_vcfs_to_GRCh37.job -v myinput=/stsi/raqueld/vcf/6800_JHS_all_chr_sampleID_c2.vcf,buildcheck=/stsi/raqueld/0_check_vcf_build/6800_JHS_all_chr_sampleID_c2.BuildChecked,myoutdir=/stsi/raqueld/1_lift,custom_temp=/mnt/stsi/stsi0/raqueld/tmp -N 1_6800_JHS_all_chr_sampleID_c2

#path to program
lift=$HOME/required_tools/lift/LiftMap.py
cpath=$HOME/required_tools/chainfiles


if [ ! -z custom_temp ]; do
    mkdir -p $custom_temp/$PBS_JOBID
    export TEMP=$custom_temp/$PBS_JOBID
fi

filename=$(basename $myinput)

if [ ! -d $myoutdir ]; then
	mkdir -p $myoutdir
fi

cd $myoutdir

name=$(echo $filename | sed -e 's/\.vcf$//g' | sed -e 's/\.vcf.gz$//g')

vcfstarttime=$(date +%s)
echo "Converting vcf to ped/map.."
#vcf-sort $myinput | bcftools view /dev/stdin -M 2 -m 2 | bcftools norm /dev/stdin -d both | plink --vcf /dev/stdin --make-bed --keep-allele-order --biallelic-only strict --set-missing-var-ids @:#:\$1:\$2 --vcf-half-call missing --out $name.sorted.bi
#FIXING STUPID PROBLEM WITH BUG IN --keep-ellele-order
bcftools query -f '%CHROM\t%POS\t%ID\t%REF\t%ALT\n' $myinput > $filename.pos
vcf-sort -t $TEMP $myinput | bcftools view /dev/stdin -M 2 -m 2 | bcftools norm /dev/stdin -d both | plink --vcf /dev/stdin --make-bed --a1-allele $filename.pos 5 3 --biallelic-only strict --set-missing-var-ids @:#:\$1:\$2 --vcf-half-call missing --out $name.sorted.bi

#FIXING STUPID PROBLEM WITH BUG IN --keep-ellele-order
#plink --bfile $name.sorted.bi --recode --keep-allele-order --double-id --set-missing-var-ids @:#:\$1:\$2 --out $name
plink --bfile $name.sorted.bi --recode --a1-allele $name.sorted.bi.bim 5 2 --double-id --set-missing-var-ids @:#:\$1:\$2 --out $name

vcfendtime=$(date +%s)

cfilename=$(grep "Use chain file" $buildcheck | tr -d ' ' | tr ':' '\t' | tr -d '"' | cut -f 2 | sed -e 's/->/ /g')
nchains=$(echo $cfilename | tr ' ' '\n' | wc -l | awk '{print $1}')

checknone=$(grep "Use chain file" $buildcheck | grep "none" | wc -l)

if [ $checknone -eq 1 ]; then

     convstarttime=$(date +%s)

     echo "The data set is already based on the correct reference build (Grch37). Just converting and copying it."
     #plink --vcf $myinput  --make-bed --keep-allele-order --double-id --set-missing-var-ids @:#:\$1:\$2 --allow-extra-chr --out $name.lifted_already_GRCh37
     #vcf-sort $myinput | bcftools view /dev/stdin -M 2 -m 2 | bcftools norm /dev/stdin -d both | plink --vcf /dev/stdin --make-bed --keep-allele-order --double-id --allow-extra-chr --biallelic-only strict --vcf-half-call missing --out $name.lifted_already_GRCh37.sorted.bi
     #plink --bfile $name.sorted.bi --make-bed --keep-allele-order --double-id --set-missing-var-ids @:#:\$1:\$2 --allow-extra-chr --out $name.lifted_already_GRCh37
     #Try this if the line above fails
     #FIXING STUPID PROBLEM WITH BUG IN --keep-ellele-order
     #plink --bfile $name.sorted.bi --make-bed --keep-allele-order --double-id --set-missing-var-ids @:#:\$1:\$2 --allow-extra-chr --out $name.lifted_already_GRCh37.sorted.with_dup
     plink --bfile $name.sorted.bi --make-bed --a1-allele $name.sorted.bi.bim 5 2 --double-id --set-missing-var-ids @:#:\$1:\$2 --allow-extra-chr --out $name.lifted_already_GRCh37.sorted.with_dup

     cut -f 2 $name.lifted_already_GRCh37.sorted.with_dup.bim | sort | uniq -d > $name.list_multi_a_markers.txt
	ndup=$(wc -l $name.list_multi_a_markers.txt | awk '{print $1}')
	if [ "$ndup" -ge 1 ]; then
		echo "Still found duplicate variant ids or multiallelic markers after filtering. Performing additional filtering."
		dupflag=$(echo -e "--exclude $name.list_multi_a_markers.txt")
	else
		dupflag=""
	fi
     #plink --bfile $name.lifted_already_GRCh37.sorted.with_dup $dupflag --make-bed --out $name.lifted_already_GRCh37
     #FIXING STUPID PROBLEM WITH BUG IN --keep-ellele-order
     plink --bfile $name.lifted_already_GRCh37.sorted.with_dup $dupflag --a1-allele $name.sorted.bi.bim 5 2 --make-bed --out $name.lifted_already_GRCh37
 

#     rm $name.sorted.bi.*
#     rm $name.lifted_already_GRCh37.sorted.*
#     rm $name.list_multi_a_markers.txt

     convendtime=$(date +%s)

	vcfruntime=$((vcfendtime-vcfstarttime))
	convruntime=$((convendtime-convstarttime))

	echo "vcf convert time: $vcfruntime"
	echo "liftover run time: Not needed to run"
	echo "output convertion run time: $convruntime"

     exit
fi

echo "Number of chain files: $nchains"

liftstarttime=$(date +%s)
echo "Lifting ped/map using chain file(s): $cfilename..."

if [ "$nchains" -eq 1 ]; then
     liftname=$(echo $cfilename |  sed -e 's/\.chain.*//g')
     $lift -p $name.ped -m $name.map -c $cpath/$cfilename -o $name.lifted_$liftname

fi
if [ "$nchains" -eq 2 ]; then
     first=$(echo $cfilename | tr ' ' '\n' | head -n 1)
     second=$(echo $cfilename | tr ' ' '\n' | tail -n 1)
     liftname=$(echo $first |  sed -e 's/\.chain.*//g')
     $lift -m $name.map -c $cpath/$first -o $name.lifted_$liftname
     liftname=$(echo $second |  sed -e 's/\.chain.*//g')
     $lift -m $name.lifted_$liftname.map -c $cpath/$second -o $name.lifted_$liftname
fi
liftendtime=$(date +%s)

convstarttime=$(date +%s)

echo "Converting lifted output $name.lifted_$liftname to bed/bim/fam.."
#plink --file $name.lifted_$liftname --keep-allele-order --double-id --allow-extra-chr --make-bed --out $name.lifted_$liftname.sorted
#FIXING STUPID PROBLEM WITH BUG IN --keep-ellele-order
plink --file $name.lifted_$liftname --a1-allele $name.sorted.bi.bim 5 2 --double-id --allow-extra-chr --make-bed --out $name.lifted_$liftname.sorted

#plink --bfile $name.lifted_$liftname.sorted --keep-allele-order --double-id --set-missing-var-ids @:#:\$1:\$2 --allow-extra-chr --make-bed --out $name.lifted_$liftname
#Try this if the line above fails
#FIXING STUPID PROBLEM WITH BUG IN --keep-ellele-order
#plink --bfile $name.lifted_$liftname.sorted --keep-allele-order --double-id --set-missing-var-ids @:#:\$1:\$2 --allow-extra-chr --make-bed --out $name.lifted_$liftname.sorted.with_dup
plink --bfile $name.lifted_$liftname.sorted --a1-allele $name.sorted.bi.bim 5 2 --double-id --set-missing-var-ids @:#:\$1:\$2 --allow-extra-chr --make-bed --out $name.lifted_$liftname.sorted.with_dup
cut -f 2 $name.lifted_$liftname.sorted.with_dup.bim | sort | uniq -d > $name.list_multi_a_markers.txt

	ndup=$(wc -l $name.list_multi_a_markers.txt | awk '{print $1}')
	if [ "$ndup" -ge 1 ]; then
		echo "Still found duplicate variant ids or multiallelic markers after filtering. Performing additional filtering."
		dupflag=$(echo -e "--exclude $name.list_multi_a_markers.txt")
	else
		dupflag=""
	fi

#FIXING STUPID PROBLEM WITH BUG IN --keep-ellele-order
#plink --bfile $name.lifted_$liftname.sorted.with_dup $dupflag --make-bed --allow-extra-chr --out $name.lifted_$liftname
plink --bfile $name.lifted_$liftname.sorted.with_dup $dupflag --make-bed --a1-allele $name.sorted.bi.bim 5 2 --allow-extra-chr --out $name.lifted_$liftname

rm $name.lifted_$liftname.sorted.*
rm $name.list_multi_a_markers.txt
rm $name.sorted.bi.*

convendtime=$(date +%s)

vcfruntime=$((vcfendtime-vcfstarttime))
liftruntime=$((liftendtime-liftstarttime))
convruntime=$((convendtime-convstarttime))

echo "vcf convert time: $vcfruntime"
echo "liftover run time: $liftruntime"
echo "output convertion run time: $convruntime"
